app.put("/completed", async function (req, res) {
    const updatePayload = req.body;
    const parsedPayload = updateTodo.safeParse(updatePayload);

    if (!parsedPayload.success) {
        res.status(411).json({
            msg: "You have sent an invalid input"
        });
        return;
    }

    try {
        const result = await todo.updateOne(
            { _id: req.body.id },
            { $set: { completed: true } }
        );

        if (result.modifiedCount === 0) {
            res.status(404).json({
                msg: "Todo not found or already completed"
            });
        } else {
            res.json({
                msg: "Todo marked as Completed"
            });
        }
    } catch (err) {
        res.status(500).json({
            msg: "Server error",
            error: err.message
        });
    }
});



==========================================================

require("dotenv").config();
const express = require("express");
const { createTodo, updateTodo } = require("./types");
const { todo } = require("./db");

const app = express();
const port = process.env.PORT || 3000;

// Middleware for JSON parsing
app.use(express.json());

// Validation Middleware
const validateRequest = (schema) => (req, res, next) => {
    const parsedPayload = schema.safeParse(req.body);
    if (!parsedPayload.success) {
        return res.status(400).json({ msg: "Invalid input", errors: parsedPayload.error.errors });
    }
    next();
};

// Create a new Todo
app.post(
    "/todo",
    validateRequest(createTodo),
    async (req, res, next) => {
        try {
            const { title, description } = req.body;
            await todo.create({ title, description, completed: false });
            res.status(201).json({ msg: "Todo created successfully" });
        } catch (err) {
            next(err);
        }
    }
);

// Fetch all Todos
app.get(
    "/todos",
    async (req, res, next) => {
        try {
            const todos = await todo.find({});
            res.status(200).json(todos);
        } catch (err) {
            next(err);
        }
    }
);

// Mark a Todo as completed
app.put(
    "/completed",
    validateRequest(updateTodo),
    async (req, res, next) => {
        try {
            const { id } = req.body;
            const result = await todo.updateOne({ _id: id }, { $set: { completed: true } });

            if (result.modifiedCount === 0) {
                return res.status(404).json({ msg: "Todo not found or already completed" });
            }
            res.status(200).json({ msg: "Todo marked as Completed" });
        } catch (err) {
            next(err);
        }
    }
);

// Global Error Handling Middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ msg: "Internal Server Error", error: err.message });
});

// Start the Server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
